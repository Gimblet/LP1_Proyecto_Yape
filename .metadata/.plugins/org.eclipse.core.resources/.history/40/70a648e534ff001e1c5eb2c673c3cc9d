package gestion;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import data.ClaseUtilitaria;
import data.Logins;
import data.Yapes;
import interfaces.IntYape;
import util.MysqlConexion;

public class Metodos implements IntYape {

	public Logins Login(int numero, String clave, String tipoUsr) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		Logins loginData = new Logins();
		try {
			String sql = "SELECT TipoUsuario, Numero, Clave, NombreApellidos FROM logins WHERE Numero=? AND Clave=? AND TipoUsuario=?;";
			con = MysqlConexion.getConexion();
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			psm.setString(2, clave);
			psm.setString(3, tipoUsr);
			rs = psm.executeQuery();
			rs.next();
			if(rs.getInt("Numero") != numero) return null;
			if(!rs.getString("Clave").equals(clave)) return null;
			if (!rs.getString("TipoUsuario").equals(tipoUsr)) return null;
			loginData.setNumero(rs.getInt("numero"));
			loginData.setClave(rs.getString("clave"));
			loginData.setTipoUsuario(rs.getString("TipoUsuario"));
			loginData.setNombreApellidos(rs.getString("NombreApellidos"));
			
			//Set Current Login Data
			
			sql = "INSERT INTO CurrentUsers (Numero, NombreApellidos) VALUES(?,?)";
			psm = con.prepareStatement(sql);
			psm.setInt(1, rs.getInt("numero"));
			psm.setString(2, rs.getString("NombreApellidos"));
			psm.executeUpdate();
			
			return loginData;
		} catch(Exception e) {
			System.out.println("Error en el bloque Try Catch de Metodos-Login");
		}
		return null;
	}
	
	public int obtenerUsuario() {
		Connection con = null;
		PreparedStatement psm = null;
		int numero = 0;
		ResultSet rs = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "Select numero from currentUsers;";
			psm = con.prepareStatement(sql);
			rs = psm.executeQuery();
			rs.next();
			numero = rs.getInt("numero");
			return numero;
		}catch(Exception e) {
			System.out.println("No se pudo Obtener el Usuario/No Existe");
		}
		return numero;
	}
	
	public ClaseUtilitaria validarYape(int numero, double monto) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		ClaseUtilitaria respuesta = new ClaseUtilitaria();
		try {
			con = MysqlConexion.getConexion();
			
			// Validar Que el numero del recibiente existe
			
			String sql = "SELECT IF( EXISTS ( SELECT numero FROM logins WHERE numero=?), 'existe', 'noExiste') AS resultado;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			rs = psm.executeQuery();
			rs.next();
			if(rs.getString("resultado").equals("noExiste")) {
				respuesta.setRespuesta("El numero ingresado no existe");
				return respuesta;
			}
			
			// Validar Que el saldo de la cuenta es suficiente
			
			sql = "SELECT Saldo from logins WHERE numero=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			rs = psm.executeQuery();
			rs.next();
			if(rs.getDouble("Saldo") < monto) {
				respuesta.setRespuesta("No hay saldo suficiente");
				return respuesta;
			}
			
			// El numero existe & Hay saldo suficiente asi que
			// Obtiene y guarda el Nombre de Persona Recibir y los demas datos
			
			sql = "SELECT NombreApellidos FROM logins WHERE numero=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			rs = psm.executeQuery();
			rs.next();
			respuesta.setNombreRecipiente(rs.getString("nombreApellidos"));	
			respuesta.setNumeroRecipiente(numero);
			respuesta.setMontoRecipiente(monto);
			respuesta.setRespuesta("Datos Conformes");
			
		} catch(Exception e) {
			System.out.println("Error en el bloque try catch de metodos.ValidarYape");
		}
		return respuesta;
	}
	
	public void yapear(int numero, double monto) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "INSERT INTO Yapes(NumeroRealizante, NumeroRecibiente, Monto, Fecha, Hora) VALUES (?, ?, ?, current_date(), now());";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			psm.setInt(2, numero);
			psm.setDouble(3, monto);
			psm.executeUpdate();
			
			//Restar dinero del Yapeador
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			rs = psm.executeQuery();
			rs.next();
			double restaSaldo = rs.getDouble("Saldo") - monto;
			sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setDouble(1, restaSaldo);
			psm.setInt(2, obtenerUsuario());
			psm.executeUpdate();
			
			//Aumentar dinero del Recibiente
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			rs = psm.executeQuery();
			rs.next();
			double sumaSaldo = rs.getDouble("Saldo") + monto;
			sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setDouble(1, sumaSaldo);
			psm.setInt(2, numero);
			psm.executeUpdate();
			
		} catch(Exception e) {
			System.out.println("Problema en try/catch de metodos.yapear");
		}
	}
	
	public Logins consultarSaldo() {
		Logins saldo = new Logins();
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "SELECT Saldo FROM logins WHERE numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			rs = psm.executeQuery();
			rs.next();
			saldo.setSaldo(rs.getDouble("Saldo"));
			return saldo;
		} catch(Exception e) {
			System.out.println("Problema en metodos.consultarSaldo");
		}
		return null;
	}
	
	public List<Yapes> ListarYapes() {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		List<Yapes> yapeList = new ArrayList<Yapes>();
		try {
			con = MysqlConexion.getConexion();
			String sql = "SELECT * FROM Yapes WHERE NumeroRealizante=? OR NumeroRecibiente=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			psm.setInt(2, obtenerUsuario());
			rs = psm.executeQuery();
			while(rs.next()) {
				Yapes yape = new Yapes();
				yape.setIdYape(rs.getInt("IdYape"));
				yape.setNumeroRealizante(rs.getInt("NumeroRealizante"));
				yape.setNumeroRecibiente(rs.getInt("NumeroRecibiente"));
				yape.setMonto(rs.getDouble("Monto"));
				yape.setFecha(formatearFecha(rs.getString("Fecha")));
				yape.setHora(formatearHora(rs.getString("Hora")));
				yapeList.add(yape);
			}
		} catch(Exception e) {
			System.out.println("Error en el Try Catch de Metodos-Listar");
		}
		return yapeList;
	}
	
	public ClaseUtilitaria obtenerInformacionYape(int id) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			// Obtenemos todos los resultados de la tabla yapes por el id
			con = MysqlConexion.getConexion();
			String sql = "SELECT * FROM Yapes WHERE IdYape=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, id);
			rs = psm.executeQuery();
			rs.next();
			
		} catch(Exception e) {
			System.out.println("Error en el try catch de Metodos.ObtenerInformacionYape");
		}
		return null;
	}
	
	public String formatearFecha(String OGFecha) {
		String Fecha = OGFecha;
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT DATE_FORMAT(?,'%W %M %e %Y') AS FechaFormateada";
			con = MysqlConexion.getConexion();
			psm = con.prepareStatement(sql);
			psm.setString(1, OGFecha);
			rs = psm.executeQuery();
			rs.next();
			Fecha = rs.getString("FechaFormateada");
			return Fecha;
		} catch(Exception e) {
			System.out.println("Error al Formatear La fecha");
		}
		return Fecha;
	}
	
	public String formatearHora(String OGHora) {
		String Hora = OGHora;
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT DATE_FORMAT(?,'%H:%i') AS HoraFormateada";
			con = MysqlConexion.getConexion();
			psm = con.prepareStatement(sql);
			psm.setString(1, OGHora);
			rs = psm.executeQuery();
			rs.next();
			Hora = rs.getString("HoraFormateada");
			return Hora;
		} catch(Exception e) {
			System.out.println("Error al Formatear La Hora");
		}
		return Hora;
	}

	public void cerrarSesion() {
		Connection con = null;
		PreparedStatement psm = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "Delete from currentUsers;";
			psm = con.prepareStatement(sql);
			psm.executeUpdate();
		} catch(Exception e) {
			System.out.println("Error En el Bloque Try Catch Cerrar Sesion");
		}
	}

}
