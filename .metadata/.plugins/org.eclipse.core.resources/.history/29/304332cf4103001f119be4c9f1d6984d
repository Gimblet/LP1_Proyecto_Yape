package gestion;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import data.ClaseUtilitaria;
import data.Logins;
import data.Yapes;
import interfaces.IntYape;
import util.MysqlConexion;

public class Metodos implements IntYape {

	public Logins Login(int numero, String clave, String tipoUsr) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		Logins loginData = new Logins();
		try {
			String sql = "SELECT TipoUsuario, Numero, Clave, NombreApellidos FROM logins WHERE Numero=? AND Clave=? AND TipoUsuario=?;";
			con = MysqlConexion.getConexion();
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			psm.setString(2, clave);
			psm.setString(3, tipoUsr);
			rs = psm.executeQuery();
			rs.next();
			if(rs.getInt("Numero") != numero) return null;
			if(!rs.getString("Clave").equals(clave)) return null;
			if (!rs.getString("TipoUsuario").equals(tipoUsr)) return null;
			loginData.setNumero(rs.getInt("numero"));
			loginData.setClave(rs.getString("clave"));
			loginData.setTipoUsuario(rs.getString("TipoUsuario"));
			loginData.setNombreApellidos(rs.getString("NombreApellidos"));
			psm.close();
			rs.close();
			
			//Set Current Login Data
			sql = "INSERT INTO CurrentUsers (Numero, NombreApellidos, TipoUsuario) VALUES(?,?,?)";
			psm = con.prepareStatement(sql);
			psm.setInt(1, loginData.getNumero());
			psm.setString(2, loginData.getNombreApellidos());
			psm.setString(3, loginData.getTipoUsuario());
			psm.executeUpdate();
		} catch(Exception e) {
			System.out.println("Error en el bloque Try Catch de Metodos-Login");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return loginData;
	}
	
	public int obtenerUsuario() {
		Connection con = null;
		PreparedStatement psm = null;
		int numero = 0;
		ResultSet rs = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "Select numero from currentUsers;";
			psm = con.prepareStatement(sql);
			rs = psm.executeQuery();
			rs.next();
			numero = rs.getInt("numero");
		}catch(Exception e) {
			System.out.println("No se pudo Obtener el Usuario/No Existe");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return numero;
	}
	
	public String obtenerTipoUsuario() {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		String tipoUsuario = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "Select TipoUsuario from currentUsers;";
			psm = con.prepareStatement(sql);
			rs = psm.executeQuery();
			rs.next();
			tipoUsuario = rs.getString("TipoUsuario");
		} catch(Exception e) {
			System.out.println("No se pudo Obtener el Usuario/No Existe");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return tipoUsuario;
	}
	
	public ClaseUtilitaria validarYape(int numero, double monto) { //MAYBE
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		ClaseUtilitaria respuesta = new ClaseUtilitaria();
		try {
			con = MysqlConexion.getConexion();
			// Validar Que el numero del recibiente existe		
			String sql = "SELECT IF( EXISTS ( SELECT numero FROM logins WHERE numero=?), 'existe', 'noExiste') AS resultado;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			rs = psm.executeQuery();
			rs.next();
			if(rs.getString("resultado").equals("noExiste")) {
				respuesta.setRespuesta("El numero ingresado no existe");
				return respuesta;
			} psm.close(); rs.close();
			
			// Validar Que el saldo de la cuenta es suficiente		
			sql = "SELECT Saldo from logins WHERE numero=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			rs = psm.executeQuery();
			rs.next();
			if(rs.getDouble("Saldo") < monto) {
				respuesta.setRespuesta("No hay saldo suficiente");
				return respuesta;
			} psm.close(); rs.close();
			
			// Obtiene y guarda el Nombre de Persona Recibir y los demas datos	
			sql = "SELECT NombreApellidos FROM logins WHERE numero=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			rs = psm.executeQuery();
			rs.next();
			respuesta.setNombreRecipiente(rs.getString("nombreApellidos"));	
			respuesta.setNumeroRecipiente(numero);
			respuesta.setMontoRecipiente(monto);
			respuesta.setRespuesta("Datos Conformes");
			
		} catch(Exception e) {
			System.out.println("Error en el bloque try catch de metodos.ValidarYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return respuesta;
	}
	
	public boolean validarYapeEditar(int numeroRec, int numeroRem, double monto) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		boolean respuesta = false;
		try {
			con = MysqlConexion.getConexion();
			// Validar Que el numero del recibiente existe
			String sql = "SELECT IF( EXISTS ( SELECT numero FROM logins WHERE numero=?), 'existe', 'noExiste') AS resultado;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numeroRec);
			rs = psm.executeQuery();
			rs.next();
			if(rs.getString("resultado").equals("noExiste")) {
				System.out.println("El numero ingresado no existe al intentar editar");
				return respuesta;
			} psm.close(); rs.close();
			
			// Validar Que el saldo de la cuenta es suficiente
			sql = "SELECT Saldo from logins WHERE numero=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numeroRem);
			rs = psm.executeQuery();
			rs.next();
			if(rs.getDouble("Saldo") < monto) {
				System.out.println("No hubo saldo suficiente al intentar editar");
				return respuesta;
			}
			respuesta = true;
			
		} catch(Exception e) {
			System.out.println("Error en el bloque try catch de metodos.ValidarYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return respuesta;
	}
	
	public void editarYape(int id, int numeroRec, int numeroRem, double monto, double OGmonto) { //MAYBE
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		String sql = null;
		double nuevoSaldo = 0;
		try {
			con = MysqlConexion.getConexion();
			//Balancear el dinero del receptor
			sql = "SELECT NumeroRecibiente AS Rec FROM Yapes WHERE IdYape=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, id);
			rs = psm.executeQuery();
			rs.next();
			int OGNumber = rs.getInt("Rec");
			psm.close(); rs.close();
			
			//Caso Mismo numero (El saldo puede disminuir o Subir)
			if(OGNumber == numeroRec) {
				sql = "SELECT Saldo FROM Logins WHERE Numero=?";
				psm = con.prepareStatement(sql);
				psm.setInt(1, numeroRec);
				rs = psm.executeQuery();
				rs.next();
				double residuoMonto = monto - OGmonto;
				if(monto < OGmonto) nuevoSaldo = rs.getDouble("Saldo") + residuoMonto;
				else nuevoSaldo = rs.getDouble("Saldo") - residuoMonto;
				psm.close(); rs.close();
				
				sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
				psm = con.prepareStatement(sql);
				psm.setDouble(1, nuevoSaldo);
				psm.setInt(2, numeroRec);
				psm.executeUpdate();
				psm.close();
			}
			
			//Caso Numero Diferente (El saldo solo puede aumentar)
			else if(OGNumber != numeroRec){
				sql = "SELECT Saldo FROM Logins WHERE Numero=?";
				psm = con.prepareStatement(sql);
				psm.setInt(1, numeroRec);
				rs = psm.executeQuery();
				rs.next();
				nuevoSaldo = rs.getDouble("Saldo") + monto;
				psm.close(); rs.close();
				
				sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
				psm = con.prepareStatement(sql);
				psm.setDouble(1, nuevoSaldo);
				psm.setInt(2, numeroRec);
				psm.executeUpdate();
				psm.close();
			}
			
			//Balancear el saldo del Remitente
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numeroRem);
			rs = psm.executeQuery();
			rs.next();
			double residuoMonto = monto - OGmonto;
			if(monto < OGmonto) nuevoSaldo = rs.getDouble("Saldo") - residuoMonto;
			else nuevoSaldo = rs.getDouble("Saldo") + residuoMonto;
			psm.close(); rs.close();
			
			sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setDouble(1, nuevoSaldo);
			psm.setInt(2, numeroRem);
			psm.executeUpdate();
			psm.close(); rs.close();
			
			//Actualizar Tabla Yapes
			sql = "UPDATE Yapes SET NumeroRecibiente=?, Monto=?, Fecha=current_date(), Hora=now(), Estado='Modificado' WHERE IdYape=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numeroRec);
			psm.setDouble(2, monto);
			psm.setInt(3, id);
			psm.executeUpdate();	
			
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("Problema en try/catch de metodos.editarYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}

	public void editarUsuario(int id, String nombreApe, double saldo, String clave) { //MAYBE
		// Saldo -9 Significa que el usuario es Admin, cualquier otro valor indica que el usuario es Cliente
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		String sql = null;
		try {
			con = MysqlConexion.getConexion();
			if(saldo == -9) {
				sql = "UPDATE Logins SET NombreApellidos=?, Clave=? WHERE IdUsuario=?";
				psm = con.prepareStatement(sql);
				psm.setString(1, nombreApe);
				psm.setString(2, clave);
				psm.setInt(3, id);
				psm.executeUpdate();
			}
			else if (saldo != -9) {
				sql = "UPDATE Logins SET NombreApellidos=?, Saldo=?, Clave=? WHERE IdUsuario=?";
				psm = con.prepareStatement(sql);
				psm.setString(1, nombreApe);
				psm.setDouble(2, saldo);
				psm.setString(3, clave);
				psm.setInt(4, id);
				psm.executeUpdate();
			}
			
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("Problema en try/catch de metodos.editarUsuario");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void eliminarYape(int id, int numeroRec, int numeroRem, double OGmonto) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			//Elimina la transaccion
			con = MysqlConexion.getConexion();
			String sql = "DELETE FROM Yapes WHERE IdYape=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, id);
			psm.executeUpdate();
			psm.close();
			
			//Devuelve del saldo al remitente
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numeroRem);
			rs = psm.executeQuery();
			rs.next();
			Double saldo = rs.getDouble("Saldo");
			psm.close(); rs.close();
			
			sql="UPDATE Logins SET Saldo=? WHERE numero=?";
			saldo = saldo + OGmonto;
			psm = con.prepareStatement(sql);
			psm.setDouble(1, saldo);
			psm.setInt(2, numeroRem);
			psm.executeUpdate();
			psm.close();
			
			//Quita el saldo previamente añadido al receptor
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numeroRec);
			rs = psm.executeQuery();
			rs.next();
			saldo = rs.getDouble("Saldo");
			psm.close(); rs.close();
			
			sql="UPDATE Logins SET Saldo=? WHERE numero=?";
			saldo = saldo - OGmonto;
			psm = con.prepareStatement(sql);
			psm.setDouble(1, saldo);
			psm.setInt(2, numeroRec);
			psm.executeUpdate();
			
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("Problema en try/catch de metodos.eliminarYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void agregarUsuario(Logins usuario) {
		Connection con = null;
		PreparedStatement psm = null;
		String sql;
		try {
			con = MysqlConexion.getConexion();
			if(usuario.getTipoUsuario().equals("Admin")) sql = "INSERT INTO Logins (TipoUsuario, NombreApellidos, Numero, Clave, Saldo) VALUES (?,?,?,?,NULL)";
			else sql = "INSERT INTO Logins (TipoUsuario, NombreApellidos, Numero, Clave, Saldo) VALUES (?,?,?,?,?)";
			psm = con.prepareStatement(sql);
			psm.setString(1, usuario.getTipoUsuario());
			psm.setString(2, usuario.getNombreApellidos());
			psm.setInt(3, usuario.getNumero());
			psm.setString(4, usuario.getClave());
			if(usuario.getIdUsuario().equals("Cliente"))
				psm.setDouble(5, usuario.getSaldo());
			
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("Problema en try/catch de metodos.eliminarYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void eliminarUsuario(int id) {
		Connection con = null;
		PreparedStatement psm = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "DELETE FROM Logins WHERE idUsuario=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, id);
			psm.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("Problema en try/catch de metodos.eliminarYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void yapear(int numero, double monto) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "INSERT INTO Yapes(NumeroRealizante, NumeroRecibiente, Monto, Fecha, Hora, Estado) VALUES (?, ?, ?, current_date(), now(), 'Corriente');";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			psm.setInt(2, numero);
			psm.setDouble(3, monto);
			psm.executeUpdate();
			psm.close(); 
			
			//Restar dinero del Yapeador
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			rs = psm.executeQuery();
			rs.next();
			double restaSaldo = rs.getDouble("Saldo") - monto;
			psm.close(); rs.close();
			
			sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setDouble(1, restaSaldo);
			psm.setInt(2, obtenerUsuario());
			psm.executeUpdate();
			psm.close();
			
			//Aumentar dinero del Recibiente
			sql = "SELECT Saldo FROM Logins WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, numero);
			rs = psm.executeQuery();
			rs.next();
			double sumaSaldo = rs.getDouble("Saldo") + monto;
			psm.close(); rs.close();
			
			sql = "UPDATE Logins SET Saldo=? WHERE Numero=?";
			psm = con.prepareStatement(sql);
			psm.setDouble(1, sumaSaldo);
			psm.setInt(2, numero);
			psm.executeUpdate();
			
		} catch(Exception e) {
			System.out.println("Problema en try/catch de metodos.yapear");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public Logins consultarSaldo() {
		Logins saldo = new Logins();
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "SELECT Saldo FROM logins WHERE numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			rs = psm.executeQuery();
			rs.next();
			saldo.setSaldo(rs.getDouble("Saldo"));
		} catch(Exception e) {
			System.out.println("Problema en metodos.consultarSaldo");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return saldo;
	}
	
	public List<Yapes> ListarYapes() {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		List<Yapes> yapeList = new ArrayList<Yapes>();
		try {
			con = MysqlConexion.getConexion();
			String sql = "SELECT * FROM Yapes WHERE NumeroRealizante=? OR NumeroRecibiente=?;";
			psm = con.prepareStatement(sql);
			psm.setInt(1, obtenerUsuario());
			psm.setInt(2, obtenerUsuario());
			rs = psm.executeQuery();
			while(rs.next()) {
				Yapes yape = new Yapes();
				yape.setIdYape(rs.getInt("IdYape"));
				yape.setNumeroRealizante(rs.getInt("NumeroRealizante"));
				yape.setNumeroRecibiente(rs.getInt("NumeroRecibiente"));
				yape.setMonto(rs.getDouble("Monto"));
				yape.setFecha(formatearFecha(rs.getString("Fecha")));
				yape.setHora(formatearHora(rs.getString("Hora")));
				yapeList.add(yape);
			}
		} catch(Exception e) {
			System.out.println("Error en el Try Catch de Metodos-Listar");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return yapeList;
	}
	
	public List<Yapes> ListarTodosLosYapes() {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		List<Yapes> yapeList = new ArrayList<Yapes>();
		try {
			con = MysqlConexion.getConexion();
			String sql = "SELECT * FROM Yapes;";
			psm = con.prepareStatement(sql);
			rs = psm.executeQuery();
			while(rs.next()) {
				Yapes yape = new Yapes();
				yape.setIdYape(rs.getInt("IdYape"));
				yape.setNumeroRealizante(rs.getInt("NumeroRealizante"));
				yape.setNumeroRecibiente(rs.getInt("NumeroRecibiente"));
				yape.setMonto(rs.getDouble("Monto"));
				yape.setFecha(formatearFecha(rs.getString("Fecha")));
				yape.setHora(formatearHora(rs.getString("Hora")));
				yape.setEstado(rs.getString("Estado"));
				yapeList.add(yape);
			}
		} catch(Exception e) {
			System.out.println("Error en el Try Catch de Metodos-Listar");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return yapeList;
	}
	
	public List<Logins> ListarUsuarios() {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		List<Logins> userList = new ArrayList<Logins>();
		String sql = null;
		try {
			con = MysqlConexion.getConexion();
			if(obtenerTipoUsuario().equals("Admin"))  sql = "SELECT * FROM Logins WHERE TipoUsuario='Cliente';";
			else if(obtenerTipoUsuario().equals("HeadAdmin"))  sql = "SELECT * FROM Logins WHERE TipoUsuario='Cliente' OR TipoUsuario='Admin';";
			psm = con.prepareStatement(sql);
			rs = psm.executeQuery();
			while(rs.next()) {
				Logins users = new Logins();
				users.setIdUsuario(rs.getInt("IdUsuario"));
				users.setTipoUsuario(rs.getString("TipoUsuario"));
				users.setNombreApellidos(rs.getString("NombreApellidos"));
				users.setSaldo(rs.getDouble("Saldo"));
				users.setNumero(rs.getInt("Numero"));
				users.setClave(rs.getString("Clave"));
				userList.add(users);
			}
		} catch(Exception e) {
			System.out.println("Error en el Try Catch de Metodos-Listar");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return userList;
	}
	
	public ClaseUtilitaria obtenerInformacionYape(int id) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		ClaseUtilitaria info = new ClaseUtilitaria();
		try {
			// Obtenemos todos los resultados de la tabla yapes por el id
			con = MysqlConexion.getConexion();
			String sql;
			
			// Revisa que tipo de usuario somos y hace un Query en base a eso
			if(obtenerTipoUsuario().equals("Cliente")) {
				sql = "SELECT * FROM Yapes WHERE IdYape=? AND(NumeroRealizante=? OR NumeroRecibiente=?)";
				psm = con.prepareStatement(sql);
				psm.setInt(1, id);
				psm.setInt(2, obtenerUsuario());
				psm.setInt(3, obtenerUsuario());
				rs = psm.executeQuery();
			} 
			
			else if(obtenerTipoUsuario().equals("Admin")) {
				sql = "SELECT * FROM Yapes WHERE IdYape=?";
				psm = con.prepareStatement(sql);
				psm.setInt(1, id);
				rs = psm.executeQuery();
			}
			
			//Guarda la informacion en info de tipo clase utilitaria
			if(rs.next()) {
				info.setIdYape(rs.getInt("IdYape"));
				info.setNumeroRemitente(rs.getInt("NumeroRealizante"));
				info.setNumeroRecipiente(rs.getInt("NumeroRecibiente"));
				info.setMontoRecipiente(rs.getDouble("Monto"));
				info.setFecha(formatearFecha(rs.getString("Fecha")));
				info.setHora(formatearHora(rs.getString("Hora")));
				info.setEstado(rs.getString("Estado"));
				info.setRespuesta("Correcto");
			} else { 
				info.setRespuesta("ID Incorrecto/Invalido");
				psm.close(); rs.close();
				return info;
			}
			psm.close(); rs.close();
			
			// Obtener el nombre del remitente 
			sql = "SELECT NombreApellidos as Nombres from logins where numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, info.getNumeroRemitente());
			rs = psm.executeQuery();
			if(rs.next()) info.setNombreRemitente(rs.getString("Nombres"));
			else System.out.println("No se Encontraron nombres con el numero de remitente especificado"); // TODO cambiar por info.set Repuesta Usuario no encontrado/Eliminado
			psm.close(); rs.close();
			
			// Obtener el nombre del recipiente
			sql = "SELECT NombreApellidos as Nombres from logins where numero=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, info.getNumeroRecipiente());
			rs = psm.executeQuery();
			if(rs.next()) info.setNombreRecipiente(rs.getString("Nombres"));
			else System.out.println("No se Encontraron nombres con el numero de recipiente especificado"); // TODO cambiar por info.set Repuesta Usuario no encontrado/Eliminado
			
		} catch(Exception e) {
			System.out.println("Error en el try catch de Metodos.ObtenerInformacionYape");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return info;
	}
	
	public Logins obtenerInformacionUsuario(int id) {
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		Logins info = new Logins();
		try {
			// Obtenemos todos los resultados de la tabla Logins por el id
			con = MysqlConexion.getConexion();
			String sql = "SELECT * FROM Logins WHERE IdUsuario=?";
			psm = con.prepareStatement(sql);
			psm.setInt(1, id);
			rs = psm.executeQuery();
			if(rs.next()) {
				info.setIdUsuario(rs.getInt("IdUsuario"));
				info.setTipoUsuario(rs.getString("TipoUsuario"));
				info.setNombreApellidos(rs.getString("NombreApellidos"));
				info.setSaldo(rs.getDouble("Saldo"));
				info.setNumero(rs.getInt("Numero"));
				info.setClave(rs.getString("Clave"));
			}
			
		} catch(Exception e) {
			e.printStackTrace();
			System.out.println("Error en el try catch de Metodos.ObtenerInformacionUsuario");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return info;
	}
	
	public String formatearFecha(String OGFecha) {
		String Fecha = OGFecha;
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT DATE_FORMAT(?,'%W %M %e %Y') AS FechaFormateada";
			con = MysqlConexion.getConexion();
			psm = con.prepareStatement(sql);
			psm.setString(1, OGFecha);
			rs = psm.executeQuery();
			rs.next();
			Fecha = rs.getString("FechaFormateada");
		} catch(Exception e) {
			System.out.println("Error al Formatear La fecha");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return Fecha;
	}
	
	public String formatearHora(String OGHora) {
		String Hora = OGHora;
		Connection con = null;
		PreparedStatement psm = null;
		ResultSet rs = null;
		try {
			String sql = "SELECT DATE_FORMAT(?,'%H:%i') AS HoraFormateada";
			con = MysqlConexion.getConexion();
			psm = con.prepareStatement(sql);
			psm.setString(1, OGHora);
			rs = psm.executeQuery();
			rs.next();
			Hora = rs.getString("HoraFormateada");
		} catch(Exception e) {
			System.out.println("Error al Formatear La Hora");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
				if(rs != null) rs.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return Hora;
	}

	public void cerrarSesion() {
		Connection con = null;
		PreparedStatement psm = null;
		try {
			con = MysqlConexion.getConexion();
			String sql = "Delete from currentUsers;";
			psm = con.prepareStatement(sql);
			psm.executeUpdate();
		} catch(Exception e) {
			System.out.println("Error En el Bloque Try Catch Cerrar Sesion");
		} finally {
			try {
				if(con != null) MysqlConexion.closeConnection(con);
				if(psm != null) psm.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
}
